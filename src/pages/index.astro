---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import {getData} from '../flood-data';
import type {Chart} from 'chart.js/auto';
let data = await getData();
console.log(data);
---
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/4.4.1/chart.umd.js"
        integrity="sha512-ZwR1/gSZM3ai6vCdI+LVF1zSq/5HznD3ZSTk7kajkaj4D292NLuduDCO1c/NT8Id+jE58KYLKT7hXnbtryGmMg=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script define:vars={{data}} is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        console.log(data);
        const hourOffset = 5;
        const prefixAmount = new Array(hourOffset).fill(null);
        const lastDate = new Date(data.at(-1).dateTime);
        const suffixLabels = new Array(hourOffset).fill(null)
            .map((value, index) => formatDate((new Date(lastDate).setHours(lastDate.getHours() + index + 1))));
        console.log(suffixLabels);
        const levelChart = new Chart(document.getElementById('level-chart'), {
            type: 'line',
            data: {
                labels: [...data.map(d => formatDate(new Date(d.dateTime))), ...suffixLabels],
                datasets: [
                    {
                        label: 'P.67 level',
                        data: [...data.map(d => d.p67Level)],
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        fill: false,
                    },
                    {
                        label: 'P.1 level',
                        data: data.map(d => d.p1Level),
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        fill: false,
                    },
                ],
            },
            options: {
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Level (m)'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Water Level',
                        font: {
                            size: 20,
                        }
                    }
                }
            }
        });
        const dischargeChart = new Chart(document.getElementById('discharge-chart'), {
            type: 'line',
            data: {
                labels: [...data.map(d => formatDate(new Date(d.dateTime))), ...suffixLabels],
                datasets: [
                    {
                        label: 'P.67 discharge',
                        data: [...data.map(d => d.p67Discharge)],
                        borderColor: 'rgb(255, 99, 132)',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        fill: false,
                    },
                    {
                        label: 'P.1 discharge',
                        data: data.map(d => d.p1Discharge),
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        fill: false,
                    },
                ],
            },
            options: {
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Discharge (m3/sec)'
                        }
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Water Discharge',
                        font: {
                            size: 20,
                        }
                    }
                }
            }
        });

        document.getElementById('offset').addEventListener('change', e => {
            const checked = e.target.checked;
            for (let chart of [levelChart, dischargeChart]) {
                let currentData = chart.data.datasets[0].data;
                if (checked) {
                    chart.data.datasets[0].data = [...prefixAmount, ...currentData];
                } else {
                    chart.data.datasets[0].data = currentData.slice(hourOffset);
                }
                chart.update('resize');
            }
        });
    });
    const format = new Intl.DateTimeFormat(undefined, {
        dateStyle: 'short',
        timeStyle: 'short',
        timeZone: 'UTC'
    });

    function formatDate(date) {
        return format.format(date);
    }
</script>

<Layout title="Ping river water level">
    <main>
        <h1>Ping river water level</h1>
        <label for="offset">
            Offset P.67 by 5 hours
        </label>
        <input id="offset" type="checkbox"/>
        <div style="width: 800px; margin-bottom: 3em;">
            <canvas id="level-chart"></canvas>
        </div>
        <div style="width: 800px;">
            <canvas id="discharge-chart"></canvas>
        </div>
        <ul role="list" class="link-card-grid">
            <Card
                    href="https://hydro-1.net/Data/HD-04/houly/hourly_level.php"
                    title="Data Source"
                    body="Hourly Level Data from Hydro-1.net"
            />
        </ul>
    </main>
</Layout>

<style>
    main {
        margin: auto;
        padding: 1rem;
        width: 800px;
        max-width: calc(100% - 2rem);
        color: white;
        font-size: 20px;
        line-height: 1.6;
    }

    .astro-a {
        position: absolute;
        top: -32px;
        left: 50%;
        transform: translatex(-50%);
        width: 220px;
        height: auto;
        z-index: -1;
    }

    h1 {
        font-size: 4rem;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin-bottom: 1em;
    }

    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }

    .instructions {
        margin-bottom: 2rem;
        border: 1px solid rgba(var(--accent-light), 25%);
        background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
        padding: 1.5rem;
        border-radius: 8px;
    }

    .instructions code {
        font-size: 0.8em;
        font-weight: bold;
        background: rgba(var(--accent-light), 12%);
        color: rgb(var(--accent-light));
        border-radius: 4px;
        padding: 0.3em 0.4em;
    }

    .instructions strong {
        color: rgb(var(--accent-light));
    }

    .link-card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
        gap: 2rem;
        padding: 0;
    }
</style>
